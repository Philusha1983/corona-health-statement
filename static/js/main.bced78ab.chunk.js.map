{"version":3,"sources":["fonts/Alef-Regular.ttf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","node","document","getElementById","htmlToImage","toPng","then","dataUrl","a","createElement","href","download","click","catch","error","console","this","signaturePad","instance","clear","className","style","display","justifyContent","marginBottom","Form","Group","as","Row","controlId","Col","Label","Control","type","placeholder","textDecorationLine","fontWeight","marginTop","defaultValue","Date","toLocaleDateString","redrawOnResize","ref","Button","variant","onClick","handleClear","bind","handleSave","direction","DIRECTIONS","RTL","flexDirection","alignItems","id","renderTitle","renderForm","renderSignaturePad","renderClarifications","renderSave","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bced78ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Alef-Regular.c5d54929.ttf\";","import React, { PureComponent } from 'react';\nimport SignaturePad from 'react-signature-pad-wrapper';\nimport {\n  Form, Row, Col, Button,\n} from 'react-bootstrap';\nimport {\n  CheckCircle, Check, X, PencilSquare,\n} from 'react-bootstrap-icons';\nimport DirectionProvider, { DIRECTIONS } from 'react-with-direction/dist/DirectionProvider';\nimport htmlToImage from 'html-to-image';\n\nclass App extends PureComponent {\n  handleSave() {\n    const node = document.getElementById('toSave');\n    htmlToImage.toPng(node)\n      .then((dataUrl) => {\n        const a = document.createElement('a');\n        a.href = dataUrl;\n        a.download = 'Statement.png';\n        a.click();\n      })\n      .catch((error) => {\n        console.error('oops, something went wrong!', error);\n      });\n  }\n\n  handleClear() {\n    this.signaturePad.instance.clear();\n  }\n\n  renderTitle() {\n    return (\n      <div className=\"columns\">\n        <div className=\"column\" style={{ display: 'flex', justifyContent: 'center' }}>\n          <h1 className=\"title\" style={{ marginBottom: 20 }}>\n            <PencilSquare />\n            {' '}\n            הצהרת בריאות\n          </h1>\n        </div>\n      </div>\n    );\n  }\n\n  renderForm() {\n    return (\n      <div>\n        <Form>\n          <Form.Group as={Row} controlId=\"frmChildName\">\n            <Col>\n              <Form.Label>שם התלמיד/ה</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"לדוגמא: פלוני אלמוני\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"frmChildID\">\n            <Col>\n              <Form.Label>מס׳ תעודת זהות</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"לדוגמא: 301234567\" />\n            </Col>\n          </Form.Group>\n          <Row>\n            <Col>\n              <span style={{ textDecorationLine: 'underline', fontWeight: 'bold' }}>אני (החתום מטה) מצהיר כי:</span>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <CheckCircle />\n              {' '}\n              מדדתי חום לילד/תי ונמצא כי חום גופו/ה מתחת ל-38 מעלות צלזיוס\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <CheckCircle />\n              {' '}\n              ילד/תי לא משתעל/ת ואין לו/לה קשיים בנשימה*\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <CheckCircle />\n              {' '}\n              למיטב ידיעתי ילד/תי לא היה/הייתה במגע קרוב עם חולה קורונה בשבועיים האחרונים\n            </Col>\n          </Row>\n\n          <Form.Group style={{ marginTop: 20 }} as={Row} controlId=\"frmParentName\">\n            <Col>\n              <Form.Label>שם ההורה</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"לדוגמא: אבא של פלוני\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"frmParentId\">\n            <Col>\n              <Form.Label>מס׳ תעודת זהות</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"לדוגמא: 301234567\" />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"frmDate\">\n            <Col>\n              <Form.Label>תאריך</Form.Label>\n              <Form.Control type=\"text\" defaultValue={new Date().toLocaleDateString('he')} />\n            </Col>\n          </Form.Group>\n        </Form>\n      </div>\n    );\n  }\n\n  renderSignaturePad() {\n    return (\n      <div className=\"columns\">\n        <div className=\"column\">\n          <Form.Group as={Row} controlId=\"frmDate\">\n            <Col>\n              <Form.Label>חתימת ההורה</Form.Label>\n              <div className=\"card\">\n                <div className=\"card-content\">\n                  <div className=\"content\">\n                    <SignaturePad\n                      redrawOnResize\n                      ref={(ref) => this.signaturePad = ref}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Col>\n          </Form.Group>\n        </div>\n      </div>\n    );\n  }\n\n  renderClarifications() {\n    return (\n      <div className=\"columns\">\n        <div className=\"column\">\n          <span>* למעט שיעול או קושי בנשימה הנובע ממצב כרוני כגון אסטמה או אלרגיה אחרת</span>\n        </div>\n      </div>\n    );\n  }\n\n  renderSave() {\n    return (\n      <div className=\"columns\" style={{ marginTop: 20, marginBottom: 20 }}>\n        <div className=\"column\" style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Button variant=\"outline-dark\" onClick={this.handleClear.bind(this)}>\n            <X />\n            {' '}\n            נקה חתימה\n          </Button>\n          <Button variant=\"dark\" onClick={this.handleSave.bind(this)}>\n            <Check />\n            {' '}\n            שמור כתמונה לשיתוף\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <DirectionProvider direction={DIRECTIONS.RTL}>\n        <div style={{\n          display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center',\n        }}\n        >\n          <section className=\"section\" id=\"toSave\">\n            <div className=\"container\">\n              {this.renderTitle()}\n              {this.renderForm()}\n              {this.renderSignaturePad()}\n              {this.renderClarifications()}\n            </div>\n          </section>\n          <section className=\"section\">\n            <div className=\"container\">\n              {this.renderSave()}\n            </div>\n          </section>\n        </div>\n      </DirectionProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/Alef-Regular.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}