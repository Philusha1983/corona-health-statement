{"version":3,"sources":["fonts/Alef-Regular.ttf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","this","signaturePad","instance","clear","className","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","Check","label","redrawOnResize","ref","onClick","handleClear","bind","direction","DIRECTIONS","RTL","renderTitle","renderForm","renderSignaturePad","renderClarifications","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8eb906e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Alef-Regular.c5d54929.ttf\";","import React, {PureComponent} from 'react';\nimport SignaturePad from 'react-signature-pad-wrapper';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\nimport DirectionProvider, { DIRECTIONS } from 'react-with-direction/dist/DirectionProvider';\n\nclass App extends PureComponent {\n\n    handleClear() {\n        this.signaturePad.instance.clear();\n    }\n\n    renderTitle() {\n        return (\n            <div className=\"columns\">\n                <div className=\"column\">\n                    <h1 className=\"title\">הצהרת בריאות לתלמיד</h1>\n                    <br/>\n                </div>\n            </div>\n        );\n    }\n\n    renderForm() {\n        return (\n            <div>\n                <Form>\n                    <Form.Group as={Row} controlId=\"frmChildName\">\n                        <Form.Label column sm={2}>שם התלמיד/ה</Form.Label>\n                        <Col sm={4}>\n                            <Form.Control type=\"text\" placeholder=\"ג׳ון דו\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId=\"frmChildID\">\n                        <Form.Label column sm={2}>מס׳ תעודת זהות</Form.Label>\n                        <Col sm={4}>\n                            <Form.Control type=\"text\" placeholder=\"301234567\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"frmChkFever\">\n                        <Form.Check type=\"checkbox\" label=\"מדדתי חום לילד/תי ונמצא כי חום גופו/ה מתחת ל-38 מעלות צלזיוס\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"frmChkCough\">\n                        <Form.Check type=\"checkbox\" label=\"ילד/תי לא משתעל/ת ואין לו/לה קשיים בנשימה*\" />\n                    </Form.Group>\n                    <Form.Group controlId=\"frmCorona\">\n                        <Form.Check type=\"checkbox\" label=\"למיטב ידיעתי ילד/תי לא היה/הייתה במגע קרוב עם חולה קורונה בשבועיים האחרונים\" />\n                    </Form.Group>\n\n                    <Form.Group as={Row} controlId=\"frmParentName\">\n                        <Form.Label column sm={2}>שם ההורה</Form.Label>\n                        <Col sm={4}>\n                            <Form.Control type=\"text\" placeholder=\"ג׳ון דו האב\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId=\"frmParentId\">\n                        <Form.Label column sm={2}>מס׳ תעודת זהות</Form.Label>\n                        <Col sm={4}>\n                            <Form.Control type=\"text\" placeholder=\"301234567\" />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId=\"frmDate\">\n                        <Form.Label column sm={2}>תאריך</Form.Label>\n                        <Col sm={4}>\n                            <Form.Control type=\"text\" placeholder=\"01/01/2020\" />\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </div>\n        )\n    }\n\n    renderSignaturePad() {\n        return (\n            <div className=\"columns\">\n                <div className=\"column\">\n                    <Form.Group as={Row} controlId=\"frmDate\">\n                        <Form.Label column sm={2}>חתימת ההורה</Form.Label>\n                        <Col sm={4}>\n                            <div className=\"card\">\n                                <div className=\"card-content\">\n                                    <div className=\"content\">\n                                        <SignaturePad\n                                            redrawOnResize={true}\n                                            ref={ref => this.signaturePad = ref} />\n                                    </div>\n                                </div>\n                                <footer className=\"card-footer\">\n                                    <a\n                                        className=\"card-footer-item\"\n                                        onClick={this.handleClear.bind(this)}\n                                    >\n                                        נקה חתימה\n                                    </a>\n                                </footer>\n                            </div>\n                        </Col>\n                    </Form.Group>\n                </div>\n            </div>\n        );\n    }\n\n    renderClarifications() {\n        return (\n            <div className=\"columns\">\n                <div className=\"column\">\n                    <span>* למעט שיעול או קושי בנשימה הנובע ממצב כרוני כגון אסטמה או אלרגיה אחרת</span>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <DirectionProvider direction={DIRECTIONS.RTL}>\n                <section className=\"section\">\n                    <div className=\"container\">\n                        {this.renderTitle()}\n                        {this.renderForm()}\n                        {this.renderSignaturePad()}\n                        {this.renderClarifications()}\n                    </div>\n                </section>\n            </DirectionProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/Alef-Regular.ttf'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}